﻿﻿<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#>using System;
using System.Collections.Generic;
using Toggl.PrimeRadiant.Models;
using Toggl.Multivac;

namespace Toggl.Foundation.Models
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Multivac/Models/" );
    var databaseModelDirectory = Path.Combine(filePath, "../../Toggl.PrimeRadiant/Models");
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var databaseInterfaces = Directory.GetFiles(databaseModelDirectory, "I*.cs");
    var isFirstClass = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IBaseModel") continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);

        if (!isFirstClass)
            WriteLine("");

        WriteLine($"    internal partial class {className} : IDatabase{className}");
        WriteLine( "    {");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var extendsIBaseModel = line.Contains(": IBaseModel");
            if (extendsIBaseModel)
            {
                WriteLine("        public long Id { get; }\n");
                continue;
            }
        
            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            WriteLine($"        public {line.Trim()}\n");
        }

        var expectedInterfaceFile = $"{ databaseModelDirectory }/IDatabase{ className }.cs";
        var interfaceFile = databaseInterfaces.FirstOrDefault(i => i == expectedInterfaceFile);
        if (interfaceFile != null)
        {
            foreach (var line in File.ReadAllLines(interfaceFile))
            {
                var isProperty = line.Contains("get;");
                if (!isProperty) continue;

                WriteLine($"        public {line.Trim()}\n");
            }
        }

        WriteLine("        public bool IsDirty { get; }");
        WriteLine("    }");

        isFirstClass = false;
    }
#>}